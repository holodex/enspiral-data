#!/usr/bin/env node

var Path = require('path')
var fs = require('fs')
var FsDb = require('fs-db')
var map = require('lodash.map')
var assign = require('lodash.assign')
var through = require('through2')
var multistream = require('multistream')
var forkable = require('forkable')

var migratePath = process.argv[2]
if (migratePath == null) {
  console.log("migrate path not given!")
  process.exit(1)
}

var migrate = require(
  Path.join(process.cwd(), migratePath)
)

if (typeof migrate !== 'function') {
  console.log("migrate is not a function")
  process.exit(1)
}

// get starting db inputs
var inputs = fs.readdirSync('.')
.filter(function (path) { return Path.extname(path) === '.csv'})
.map(function (path) {
  var type = Path.basename(path, '.csv')
  return getDb(type)
})
.map(function (db) {
  return db.createReadStream()
  .pipe(through.obj(function (row, enc, cb) {
    assign(row, { type: db.type })
    console.log('in', row, enc)
    cb(null, row)
  }))
})

// migrate
var migrated = multistream.obj(inputs)
  .pipe(migrate())

migrated.on('data', console.log.bind(console, 'out'))

var outputs = {} 

// get ending db outputs
forkable(
  migrated
)
.fork(function (row) {
  var type = row.type
  delete row.type
  return type
})
.pipe(function (type) {
  if (outputs[type] == null) {
    outputs[type] = getDb(type, true)
  }
  return outputs[type].createWriteStream()
})

function getDb (type, isTmp) {
  var dir = isTmp ? 'tmp' : ''
  var path = Path.join(process.cwd(), dir, type + '.csv')
  var db = FsDb({
    location: path,
    codec: ['csv', { newline: '\n' }],
    keyAttribute: 'id'
  })
  db.type = type
  return db
}
